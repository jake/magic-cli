#!/usr/bin/env ruby
require_relative 'commando-helpers.rb'

program :description, 'Takes a directory of frame sequences and renders to a lossless video.'
program :version, '1.0.0'

heading program :name

command :render do |c|
  c.description = 'Renders frame sequences in <input> to new file in <output>. Will overwrite existing file with same name.'
  c.option '--input DIR', String, 'Input directory'
  c.option '--output DIR', String, 'Output directory'
  c.option '--outfile FILE', String, 'Output filename, without extension (will be written to output)'
  c.option '--fps INT', Integer, 'FPS to use for render'
  c.option '--qscale INT', Integer, 'Quality scale. 0 is best, 32 which is worst. Sweetspot is 9 - 13'
  c.option '--size STRING', String, 'Frame size'
  c.action do |args, options|
    options.default \
      input: "./input",
      output: ".",
      fps: 30,
      qscale: 13,
      size: "1920x1080"

    options.input = File.expand_path(options.input)
    options.output = File.expand_path(options.output)

    options.outfile = "#{options.outfile || File.basename(options.input)}.mov"
    
    dump_options(options)

    if ! File.directory?(options.input)
      crash "Input directory '#{options.input}' does not exist"
    end

    if ! File.directory?(options.output)
      crash "Output directory '#{options.output}' does not exist"
    end

    frames = Dir.glob("#{options.input}/*.png")

    if frames.length == 0
      crash "#{options.input} does not contain any *.png files"
    end

    Cocaine::CommandLine.runner = Cocaine::CommandLine::PopenRunner.new
    ffmpeg = Cocaine::CommandLine.new("ffmpeg", "-loglevel panic -stats -y -probesize 5000000 -f image2 -r :fps -pattern_type glob -i :input -c:v prores_ks -profile:v 3 -qscale:v :qscale -vendor ap10 -pix_fmt yuv422p10le -s :size -r :fps -force_fps :output")
    begin
      notice "Rendering #{options.input}/*.png (#{frames.length} frames)..."
      ffmpeg.run(
        input: "#{options.input}/*.png",
        output: "#{options.output}/#{options.outfile}",
        fps: options.fps,
        qscale: options.qscale,
        size: options.size
      )
      success "Rendered to #{options.output}/#{options.outfile}"
    rescue Cocaine::ExitStatusError => e
      warning e.message
    end
  end
end
default_command :render
